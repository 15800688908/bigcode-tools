#!/usr/bin/env python

import os
import re
import os.path as path
import json
import subprocess
from argparse import ArgumentParser
from collections import namedtuple
from concurrent.futures import ThreadPoolExecutor

import requests


class Project:
    def __init__(self, name, url, repo=None, language=None):
        self.name = name
        self.url = url
        self.repo = repo
        self.language = language


def project_from_github_repo(repo):
    return Project(
        name=repo["name"],
        url=repo["html_url"],
        repo=repo["clone_url"],
        language=repo["language"].lower() if repo["language"] else None
    )


def get_projects_list():
    url = "https://api.github.com/users/apache/repos?per_page=100"
    projects = []
    while url:
        r = requests.get(url)
        for repo in r.json():
            projects.append(project_from_github_repo(repo))
        url = r.links.get("next", {}).get("url")
    return projects


def save_projects_list(output_file):
    projects = get_projects_list()

    project_dicts = [vars(project) for project in projects]
    with open(output_file, "w") as f:
        json.dump(project_dicts, f)


def download_git_project(project, output_dir):
    subprocess.run(["git", "clone", "--depth", "1", project.repo, output_dir])


def download_project(project, output_base_dir):
    try:
        output_dir = path.join(output_base_dir, project.name)
        if path.isdir(output_dir):
            print("{0} already exists".format(project.name))
            return
        download_git_project(project, output_dir)
    except Exception as e:
        print("could not download {0}: {1}".format(project.name, e))


def download_projects(projects, output_dir):
    with ThreadPoolExecutor() as executor:
        executor.map(lambda p: download_project(p, output_dir), projects)


def load_projects_from_file(input_file):
    with open(input_file, "r") as f:
        return [Project(**project) for project in json.load(f)]


def download_projects_command(args):
    if args.input_file:
        projects = load_projects_from_file(args.input_file)
    else:
        projects = get_projects_list()

    filter_regexp = re.compile(args.matching, flags=re.RegexFlag.IGNORECASE)
    projects = [project for project in projects if filter_regexp.match(project.name)]
    if args.language:
        projects = [project for project in projects if project.language == args.language.lower()]
    download_projects(projects, args.output_dir)


def list_projects_command(args):
    save_projects_list(args.output)


def create_parser():
    parser = ArgumentParser(prog="apache-projects",
                            description="Fetch and download Apache projects")
    subparsers = parser.add_subparsers(dest="command")

    list_projects_parser = subparsers.add_parser("list", help="list projects")
    list_projects_parser.add_argument("-o", "--output", default="projects.json")

    download_projects_parser = subparsers.add_parser("download", help="download projects in list")
    download_projects_parser.add_argument("-i", "--input-file")
    download_projects_parser.add_argument("-o", "--output-dir", default=os.getcwd())
    download_projects_parser.add_argument("--matching", default=".*",
                                          help="only download project matching the passed regexp")
    download_projects_parser.add_argument("--language",
                                          help="only download project with the given language")

    return parser


def run_command(args):
    if args.command == "list":
        list_projects_command(args)
    elif args.command == "download":
        download_projects_command(args)


def main():
    parser = create_parser()
    args = parser.parse_args()
    if not args.command:
        parser.error("no command provided")
    run_command(args)


if __name__ == "__main__":
    main()
